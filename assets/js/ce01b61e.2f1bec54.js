"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4436],{5680:(e,n,i)=>{i.d(n,{xA:()=>p,yg:()=>m});var r=i(6540);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function t(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,r)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?t(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):t(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function g(e,n){if(null==e)return{};var i,r,a=function(e,n){if(null==e)return{};var i,r,a={},t=Object.keys(e);for(r=0;r<t.length;r++)i=t[r],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)i=t[r],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var d=r.createContext({}),s=function(e){var n=r.useContext(d),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},p=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},c="mdxType",E={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},_=r.forwardRef((function(e,n){var i=e.components,a=e.mdxType,t=e.originalType,d=e.parentName,p=g(e,["components","mdxType","originalType","parentName"]),c=s(i),_=a,m=c["".concat(d,".").concat(_)]||c[_]||E[_]||t;return i?r.createElement(m,l(l({ref:n},p),{},{components:i})):r.createElement(m,l({ref:n},p))}));function m(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var t=i.length,l=new Array(t);l[0]=_;var g={};for(var d in n)hasOwnProperty.call(n,d)&&(g[d]=n[d]);g.originalType=e,g[c]="string"==typeof e?e:a,l[1]=g;for(var s=2;s<t;s++)l[s]=i[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,i)}_.displayName="MDXCreateElement"},1128:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>E,frontMatter:()=>t,metadata:()=>g,toc:()=>s});var r=i(8168),a=(i(6540),i(5680));const t={},l="cmake\u914d\u7f6eOpenGL\u7684\u73af\u5883",g={unversionedId:"OpenGL/config",id:"OpenGL/config",title:"cmake\u914d\u7f6eOpenGL\u7684\u73af\u5883",description:"\u6211\u4ec5\u5728Win10+VS2019+VS Code\u73af\u5883\u4e0b\u6d4b\u8bd5\u8fc7\u3002",source:"@site/docs/OpenGL/config.md",sourceDirName:"OpenGL",slug:"/OpenGL/config",permalink:"/OpenGL/config",draft:!1,editUrl:"https://github.com/chunleili/chunleili.github.io/tree/master/docs/OpenGL/config.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"write_tet",permalink:"/Houdini/write_tet"},next:{title:"OpenVDB\u7684\u5b89\u88c5\u4e0e\u7b2c\u4e00\u4e2ademo",permalink:"/OpenVDB/first-openvdb"}},d={},s=[{value:"\u7b2c\u4e09\u65b9\u5e93\u914d\u7f6e  \u65b9\u6cd51\uff1a\u4f7f\u7528vcpkg\u7684MANIFEST\u6a21\u5f0f",id:"\u7b2c\u4e09\u65b9\u5e93\u914d\u7f6e--\u65b9\u6cd51\u4f7f\u7528vcpkg\u7684manifest\u6a21\u5f0f",level:2},{value:"\u7b2c\u4e09\u65b9\u5e93\u914d\u7f6e \u65b9\u6cd52\uff1a\u4ece\u6e90\u7801\u6784\u5efa\u7b2c\u4e09\u65b9\u5e93",id:"\u7b2c\u4e09\u65b9\u5e93\u914d\u7f6e-\u65b9\u6cd52\u4ece\u6e90\u7801\u6784\u5efa\u7b2c\u4e09\u65b9\u5e93",level:2},{value:"shader\u7b49\u6587\u4ef6\u7684\u62f7\u8d1d",id:"shader\u7b49\u6587\u4ef6\u7684\u62f7\u8d1d",level:2},{value:"\u5b8c\u6574\u7684\u6839\u76ee\u5f55\u4e0bCMakeLists.txt",id:"\u5b8c\u6574\u7684\u6839\u76ee\u5f55\u4e0bcmakeliststxt",level:2}],p={toc:s},c="wrapper";function E(e){let{components:n,...i}=e;return(0,a.yg)(c,(0,r.A)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"cmake\u914d\u7f6eopengl\u7684\u73af\u5883"},"cmake\u914d\u7f6eOpenGL\u7684\u73af\u5883"),(0,a.yg)("p",null,"\u6211\u4ec5\u5728Win10+VS2019+VS Code\u73af\u5883\u4e0b\u6d4b\u8bd5\u8fc7\u3002"),(0,a.yg)("p",null,"github repo\u8bf7\u770b\uff1a"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/chunleili/OpenGL"},"https://github.com/chunleili/OpenGL")),(0,a.yg)("p",null,"\u76ee\u5f55\u7ed3\u6784"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 extern\n\u2502\xa0\xa0 \u251c\u2500\u2500 assimp\n\u2502\xa0\xa0 \u251c\u2500\u2500 eigen\n\u2502\xa0\xa0 \u251c\u2500\u2500 glad\n\u2502\xa0\xa0 \u251c\u2500\u2500 glew\n\u2502\xa0\xa0 \u251c\u2500\u2500 glfw\n\u2502\xa0\xa0 \u251c\u2500\u2500 glm\n\u2502\xa0\xa0 \u2514\u2500\u2500 imgui\n\u251c\u2500\u2500 rename_to_vcpkg_if_use_vcpkg.json\n\u251c\u2500\u2500 res\n\u2502\xa0\xa0 \u2514\u2500\u2500 shader\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 include\n    \u2514\u2500\u2500 main.cpp\n")),(0,a.yg)("h2",{id:"\u7b2c\u4e09\u65b9\u5e93\u914d\u7f6e--\u65b9\u6cd51\u4f7f\u7528vcpkg\u7684manifest\u6a21\u5f0f"},"\u7b2c\u4e09\u65b9\u5e93\u914d\u7f6e  \u65b9\u6cd51\uff1a\u4f7f\u7528vcpkg\u7684MANIFEST\u6a21\u5f0f"),(0,a.yg)("p",null,"\u8fd9\u79cd\u65b9\u6cd5\u6700\u5feb\u6377\u7701\u4e8b\u3002\u4f46\u662f\u4e00\u65e6\u7528\u4e86vcpkg\uff0c\u5c31\u8981\u5168\u90e8\u4f7f\u7528vcpkg\u3002"),(0,a.yg)("p",null,"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u5efa\u7acbvcpkg.json\u6587\u4ef6\u3002\n\u5185\u5bb9\u5982\u4e0b"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "opengl",\n    "version": "0.0.1",\n    "description": "learn the OpenGL",\n    "dependencies": [\n        "eigen3",\n        "imgui",\n        "glfw3",\n        "glm",\n        "glad",\n        "assimp"\n    ]\n}\n')),(0,a.yg)("p",null,"\u6839\u76ee\u5f55\u4e0b\u7684CMakeLists.txt\u4e2d\u6dfb\u52a0"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"# \u5047\u5982\u4f7f\u7528\u4e86vcpkg\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528find_package\u6765\u627e\u5230\u5e93\nfind_package(Eigen3 CONFIG REQUIRED)\ntarget_link_libraries(main PRIVATE Eigen3::Eigen)\n\nfind_package(imgui CONFIG REQUIRED)\ntarget_link_libraries(main PRIVATE imgui::imgui)\n\nfind_package(assimp CONFIG REQUIRED)\ntarget_link_libraries(main PRIVATE assimp::assimp)\n\nfind_package(glfw3 CONFIG REQUIRED)\ntarget_link_libraries(main PRIVATE glfw)\n\nfind_package(glad CONFIG REQUIRED)\ntarget_link_libraries(main PRIVATE glad::glad)\n\nfind_package(glm CONFIG REQUIRED)\ntarget_link_libraries(main PRIVATE glm::glm)\n")),(0,a.yg)("p",null,"\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u7b80\u4fbf\u3002\u53ea\u8981\u4f60config\u4e00\u4e0bcmake\u5c31\u4f1a\u81ea\u52a8\u5728build/vcpkg_install\u76ee\u5f55\u4e0b\u4e3a\u4f60\u4e0b\u8f7d\u5e76\u4e14\u914d\u7f6e\u7b2c\u4e09\u65b9\u5e93\u3002"),(0,a.yg)("h2",{id:"\u7b2c\u4e09\u65b9\u5e93\u914d\u7f6e-\u65b9\u6cd52\u4ece\u6e90\u7801\u6784\u5efa\u7b2c\u4e09\u65b9\u5e93"},"\u7b2c\u4e09\u65b9\u5e93\u914d\u7f6e \u65b9\u6cd52\uff1a\u4ece\u6e90\u7801\u6784\u5efa\u7b2c\u4e09\u65b9\u5e93"),(0,a.yg)("p",null,"\u8fd9\u79cd\u65b9\u5f0f\u7684\u597d\u5904\u662f\u522b\u4eba\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e0d\u9700\u8981\u5b89\u88c5vcpkg\u3002\u5e76\u4e14\u4fdd\u8bc1\u4e86\u7248\u672c\u7684\u7a33\u5b9a\u6027\uff08vcpkg\u66f4\u65b0\u6bd4\u8f83\u6fc0\u8fdb\uff09"),(0,a.yg)("p",null,"\u5728extern\u6587\u4ef6\u5939\u4e0b\u653e\u7f6e\u5404\u4e2a\u7b2c\u4e09\u65b9\u5e93\u7684\u6e90\u7801\u3002"),(0,a.yg)("p",null,"\u9879\u76ee\u6839\u76ee\u5f55\u7684CMakeLists.tst"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cmake"},'set(EXTERN_DIR ${PROJECT_SOURCE_DIR}/extern)\n# # assimp\n# add_subdirectory(extern/assimp)\n\n# eigen\nadd_library(Eigen INTERFACE)\ntarget_include_directories(Eigen INTERFACE ${EXTERN_DIR}/eigen)\n# glm\nadd_subdirectory(extern/glm)\n# opengl\nfind_package(OpenGL REQUIRED) # windows SDK\u4e2d\u6709opengl\u7684\u5e93\n# glfw\nadd_subdirectory(extern/glfw)\n# glad\nadd_library(glad INTERFACE)\ntarget_include_directories(glad INTERFACE ${EXTERN_DIR}/glad/include)\ntarget_sources(glad INTERFACE ${EXTERN_DIR}/glad/src/glad.c)\n\n#glad\u548cglew\u4f7f\u7528\u4e00\u4e2a\u5373\u53ef\u3002\u8fd9\u91cc\u4f7f\u7528glad, \u56e0\u6b64\u4e0d\u518d\u4f7f\u7528glew\noption(USE_GLEW "use glew(Not recommend, now we use glad instead)" OFF)\nif(USE_GLEW)\n    add_subdirectory(extern/glew)\n    # \u5982\u679c\u4f7f\u7528GLEW \u5e76\u4e14\u8fd8\u8981link\u4e00\u4e0b\uff01\nendif()\n\n#imgui \nadd_subdirectory(extern/imgui)\n\ntarget_link_libraries(main PRIVATE\n    OpenGL::GL\n    glad\n    glfw\n    glm\n    Eigen\n    imgui\n    # assimp\n)\n')),(0,a.yg)("p",null,"\u8fd9\u91ccimgui\u539f\u4f5c\u8005\u5e76\u672a\u63d0\u4f9bcmake\u652f\u6301\u3002\u56e0\u6b64\u6211\u81ea\u5df1\u5199\u4e86\u4e00\u4e0bcmake\u3002\u5982\u4e0b"),(0,a.yg)("p",null,"extern/imgui\u4e0b\u9762\u7684CMakeLists.txt"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"#imgui \nadd_library(imgui INTERFACE)\ntarget_include_directories(imgui INTERFACE\n ${EXTERN_DIR}/imgui\n ${EXTERN_DIR}/imgui/backends\n )\nfile(GLOB IMGUI_FILES \n    ${EXTERN_DIR}/imgui/*.h \n    ${EXTERN_DIR}/imgui/*.cpp \n    ${EXTERN_DIR}/imgui/backends/imgui_impl_opengl3.*\n    ${EXTERN_DIR}/imgui/backends/imgui_impl_glfw.*\n    ${EXTERN_DIR}/imgui/backends/imgui_impl_opengl3_loader.h\n)\ntarget_sources(imgui INTERFACE ${IMGUI_FILES})\n\ntarget_link_libraries(imgui INTERFACE glad glfw OpenGL::GL)\n\nadd_executable(imgui_example ${EXTERN_DIR}/imgui/examples/example_glfw_opengl3/main.cpp)\ntarget_link_libraries(imgui_example PRIVATE imgui glad glfw)\n")),(0,a.yg)("h2",{id:"shader\u7b49\u6587\u4ef6\u7684\u62f7\u8d1d"},"shader\u7b49\u6587\u4ef6\u7684\u62f7\u8d1d"),(0,a.yg)("p",null,"\u7531\u4e8eshader\u6e90\u7801\u662f\u8981\u4eceexe\u6240\u5728\u6587\u4ef6\u5939\u5f00\u59cb\u627e\u7684\uff0c\u6240\u4ee5\u4e00\u822c\u53ef\u4ee5\u5c06res/shader\u590d\u5236\u5230exe\u6240\u5728\u76ee\u5f55"),(0,a.yg)("p",null,"\u590d\u5236\u65b9\u6cd5\u5982\u4e0b(\u5229\u7528add_custom_command)"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"# \u590d\u5236shader\u7b49\u5230build/bin\u76ee\u5f55\nadd_custom_command(\n        TARGET main  POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${PROJECT_SOURCE_DIR}/res ${PROJECT_BINARY_DIR}/bin/$<CONFIG>/res\n    )\n")),(0,a.yg)("p",null,"\u6bcf\u5f53\u7f16\u8bd1main.exe\u7684\u65f6\u5019\u90fd\u4f1a\u81ea\u52a8\u62f7\u8d1d\u5bf9\u5e94\u7684res\u6587\u4ef6\u5939"),(0,a.yg)("h2",{id:"\u5b8c\u6574\u7684\u6839\u76ee\u5f55\u4e0bcmakeliststxt"},"\u5b8c\u6574\u7684\u6839\u76ee\u5f55\u4e0bCMakeLists.txt"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'cmake_minimum_required(VERSION 3.23)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nproject(OpenGL CXX)\n\n# set default build type to release\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release)\nendif()\nmessage(STATUS "Build type: ${CMAKE_BUILD_TYPE}")\n\n# \u8bbe\u7f6e\u8f93\u51fa\u76ee\u5f55\u4e3abuild/bin\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\nset(CMAKE_DEBUG_POSTFIX "_d")\n\n# compile the source\nadd_executable(main "")\nset(SRC_DIR ${PROJECT_SOURCE_DIR}/src)\ntarget_include_directories(main PRIVATE ${SRC_DIR}/include)\nfile(GLOB_RECURSE SRC_FILES ${SRC_DIR}/*.cpp ${SRC_DIR}/*.h)\ntarget_sources(main PRIVATE ${SRC_FILES})\n\n\n# \u590d\u5236shader\u7b49\u5230build/bin\u76ee\u5f55\n# file(COPY ${PROJECT_SOURCE_DIR}/res DESTINATION ${PROJECT_BINARY_DIR}/bin/$<CONFIG>)\nadd_custom_command(\n        TARGET main  POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory\n        ${PROJECT_SOURCE_DIR}/res ${PROJECT_BINARY_DIR}/bin/$<CONFIG>/res\n    )\n\n# -------------------------------------------------------------------------- #\n#                           set external libraries                           #\n# -------------------------------------------------------------------------- #\nset(EXTERN_DIR ${PROJECT_SOURCE_DIR}/extern)\n# # assimp\n# add_subdirectory(extern/assimp)\n\n# eigen\nadd_library(Eigen INTERFACE)\ntarget_include_directories(Eigen INTERFACE ${EXTERN_DIR}/eigen)\n# glm\nadd_subdirectory(extern/glm)\n# opengl\nfind_package(OpenGL REQUIRED) # windows SDK\u4e2d\u6709opengl\u7684\u5e93\n# glfw\nadd_subdirectory(extern/glfw)\n# glad\nadd_library(glad INTERFACE)\ntarget_include_directories(glad INTERFACE ${EXTERN_DIR}/glad/include)\ntarget_sources(glad INTERFACE ${EXTERN_DIR}/glad/src/glad.c)\n\n#glad\u548cglew\u4f7f\u7528\u4e00\u4e2a\u5373\u53ef\u3002\u8fd9\u91cc\u4f7f\u7528glad, \u56e0\u6b64\u4e0d\u518d\u4f7f\u7528glew\noption(USE_GLEW "use glew(Not recommend, now we use glad instead)" OFF)\nif(USE_GLEW)\n    add_subdirectory(extern/glew)\n    # \u5982\u679c\u4f7f\u7528GLEW \u5e76\u4e14\u8fd8\u8981link\u4e00\u4e0b\uff01\nendif()\n\n#imgui \nadd_subdirectory(extern/imgui)\n\ntarget_link_libraries(main PRIVATE\n    OpenGL::GL\n    glad\n    glfw\n    glm\n    Eigen\n    imgui\n    # assimp\n)\n\n\n\n# # \u5047\u5982\u4f7f\u7528\u4e86vcpkg\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528find_package\u6765\u627e\u5230\u5e93\n# find_package(Eigen3 CONFIG REQUIRED)\n# target_link_libraries(main PRIVATE Eigen3::Eigen)\n\n# find_package(imgui CONFIG REQUIRED)\n# target_link_libraries(main PRIVATE imgui::imgui)\n\n# find_package(assimp CONFIG REQUIRED)\n# target_link_libraries(main PRIVATE assimp::assimp)\n\n# find_package(glfw3 CONFIG REQUIRED)\n# target_link_libraries(main PRIVATE glfw)\n\n# find_package(glad CONFIG REQUIRED)\n# target_link_libraries(main PRIVATE glad::glad)\n\n# find_package(glm CONFIG REQUIRED)\n# target_link_libraries(main PRIVATE glm::glm)\n')))}E.isMDXComponent=!0}}]);