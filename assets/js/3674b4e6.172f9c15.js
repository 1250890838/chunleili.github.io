"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[696],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,p=function(e,n){if(null==e)return{};var t,r,p={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(p[t]=e[t]);return p}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(p[t]=e[t])}return p}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,p=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=s(t),d=p,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function d(e,n){var t=arguments,p=n&&n.mdxType;if("string"==typeof e||p){var i=t.length,o=new Array(i);o[0]=m;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:p,o[1]=a;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4614:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var r=t(7462),p=(t(7294),t(3905));const i={},o="\u5728splishsplash\u4e2d\u6dfb\u52a0\u7528\u6237\u4ea4\u4e92\uff1a\u7528crtl+wasdfb\u79fb\u52a8\u521a\u4f53",a={unversionedId:"SPlisHSPlaSH/Interactive",id:"SPlisHSPlaSH/Interactive",title:"\u5728splishsplash\u4e2d\u6dfb\u52a0\u7528\u6237\u4ea4\u4e92\uff1a\u7528crtl+wasdfb\u79fb\u52a8\u521a\u4f53",description:"\u601d\u8def\uff1a",source:"@site/docs/SPlisHSPlaSH/Interactive.md",sourceDirName:"SPlisHSPlaSH",slug:"/SPlisHSPlaSH/Interactive",permalink:"/SPlisHSPlaSH/Interactive",draft:!1,editUrl:"https://github.com/chunleili/chunleili.github.io/tree/master/docs/SPlisHSPlaSH/Interactive.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OpenVDB\u7684\u5b89\u88c5\u4e0e\u7b2c\u4e00\u4e2ademo",permalink:"/OpenVDB/first-openvdb"},next:{title:"\u5728SPlisHSPlaSH\u4e2d\u83b7\u53d6\u9f20\u6807\u4f4d\u7f6e",permalink:"/SPlisHSPlaSH/get_mouse"}},l={},s=[{value:"1 \u4e2d\u4ecb\u7c7bInteractive\u548c\u5355\u4f8b\u6a21\u5f0f",id:"1-\u4e2d\u4ecb\u7c7binteractive\u548c\u5355\u4f8b\u6a21\u5f0f",level:2},{value:"2 \u83b7\u53d6\u521a\u4f53\u63a7\u5236\u6743\uff08\u8d28\u5fc3\u4f4d\u7f6e\u6307\u9488\uff09",id:"2-\u83b7\u53d6\u521a\u4f53\u63a7\u5236\u6743\u8d28\u5fc3\u4f4d\u7f6e\u6307\u9488",level:2},{value:"3 \u4eceMinGL\u4e2d\u83b7\u53d6\u952e\u76d8\u7684\u8f93\u5165\u5e76\u64cd\u4f5c\u521a\u4f53\u6307\u9488\u79fb\u52a8\u521a\u4f53",id:"3-\u4ecemingl\u4e2d\u83b7\u53d6\u952e\u76d8\u7684\u8f93\u5165\u5e76\u64cd\u4f5c\u521a\u4f53\u6307\u9488\u79fb\u52a8\u521a\u4f53",level:2},{value:"\u6700\u7ec8\u7ed3\u679c",id:"\u6700\u7ec8\u7ed3\u679c",level:2},{value:"\u9644\u5f55\uff1aInteractive.h \u5b8c\u6574\u4ee3\u7801",id:"\u9644\u5f55interactiveh-\u5b8c\u6574\u4ee3\u7801",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,p.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"\u5728splishsplash\u4e2d\u6dfb\u52a0\u7528\u6237\u4ea4\u4e92\u7528crtlwasdfb\u79fb\u52a8\u521a\u4f53"},"\u5728splishsplash\u4e2d\u6dfb\u52a0\u7528\u6237\u4ea4\u4e92\uff1a\u7528crtl+wasdfb\u79fb\u52a8\u521a\u4f53"),(0,p.kt)("p",null,"\u601d\u8def\uff1a"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u65b0\u5efa\u4e00\u4e2a Interactive \u7c7b\uff0c\u4f5c\u4e3a\u4e2d\u4ecb\u8005\u3002\u5b83\u662f\u4e2a\u5355\u4f8b"),(0,p.kt)("li",{parentName:"ol"},"\u4ecePBDWrapper::timeStep \u83b7\u53d6\u521a\u4f53\u8d28\u5fc3\u4f4d\u7f6e\u7684\u6307\u9488\uff0c\u4f20\u7ed9Interactive\u3002"),(0,p.kt)("li",{parentName:"ol"},"\u4eceMinGL\u4e2d\u83b7\u53d6\u952e\u76d8\u7684\u8f93\u5165\u3002\u4f20\u9012\u7ed9Interactive\u3002\u5f53\u63a5\u6536\u952e\u76d8\u8f93\u5165\u65f6\uff0c\u5c31\u64cd\u4f5c\u521a\u4f53\u6307\u9488\u4f7f\u4e4b\u79fb\u52a8\u3002")),(0,p.kt)("h2",{id:"1-\u4e2d\u4ecb\u7c7binteractive\u548c\u5355\u4f8b\u6a21\u5f0f"},"1 \u4e2d\u4ecb\u7c7bInteractive\u548c\u5355\u4f8b\u6a21\u5f0f"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cpp"},"//\u7528\u6237\u4ea4\u4e92\uff08\u952e\u76d8\u9f20\u6807\uff09\u7684\u4e2d\u4ecb\u7c7b\uff0c\u7528\u4e8e\u4f20\u9012\u548c\u5904\u7406\u6570\u636e\nstruct Interactive\n{\n    //a singleton method to get the object\n    static Interactive& get_inter()\n    {\n        static Interactive inter;\n        return inter;\n    }\n}\n")),(0,p.kt)("p",null,"get_inter\u662f\u4e2a\u5355\u4f8b\u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u552f\u4e00\u7684\u5bf9\u8c61"),(0,p.kt)("p",null,"\u4f7f\u7528\u7684\u65f6\u5019\uff0c"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cpp"},"Interactive::get_inter().xxmethod()\n")),(0,p.kt)("p",null,"xxmethod()\u662f\u4f60\u60f3\u8fdb\u884c\u7684\u64cd\u4f5c\u3002"),(0,p.kt)("h2",{id:"2-\u83b7\u53d6\u521a\u4f53\u63a7\u5236\u6743\u8d28\u5fc3\u4f4d\u7f6e\u6307\u9488"},"2 \u83b7\u53d6\u521a\u4f53\u63a7\u5236\u6743\uff08\u8d28\u5fc3\u4f4d\u7f6e\u6307\u9488\uff09"),(0,p.kt)("p",null,"\u6211\u4eec\u9700\u8981\u77e5\u9053\u5728\u54ea\u91cc\u8c03\u7528\u4e86\u521a\u4f53\u3002\u4f4d\u7f6e\u5728\nSimulator\\PositionBasedDynamicsWrapper\\PBDWrapper.cpp",(0,p.kt)("br",{parentName:"p"}),"\n","void PBDWrapper::timeStep()"),(0,p.kt)("p",null,"\u6211\u4eec\u5728\u6b64\u8c03\u7528\u5185\u90e8\u7684\u65b9\u6cd5 set_rb_pos\uff0c\u4ece\u800c\u628a\u6307\u9488\u4f20\u8fc7\u53bb\n",(0,p.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/48758868/198996248-873f8d90-356d-4ac3-bd3e-5d950748448e.png",alt:"image"})),(0,p.kt)("p",null,"\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u83b7\u53d6\u521a\u4f53\u63a7\u5236\u6743\u7684set_rb_pos\u65b9\u6cd5(\u4f20\u9012\u7684\u662f\u5f15\u7528\uff0c\u6211\u4eec\u8f6c\u6362\u4e3a\u6307\u9488)"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'    //\u83b7\u53d6\u521a\u4f53\u7684\u63a7\u5236\u6743\u3002\n    void set_rb_pos(Vector3r& rb_pos)\n    {\n        // \u83b7\u53d6\u5e76\u8bbe\u5b9a\u4f4d\u7f6e\u4e3a\u9f20\u6807\u70b9\u51fb\u4f4d\u7f6e FIXME:\n        // (rb_pos) = mouse_pos; \n\n        //\u7528wasdfb\u6765\u79fb\u52a8\n        // \u83b7\u53d6\u521a\u4f53\u8d28\u5fc3\u6307\u9488\n        p_rb_pos = &rb_pos; \n        std::cout<< "rb_pos: "<< (rb_pos)<<"\\n";\n    }\n')),(0,p.kt)("p",null,"\u8fd9\u4e2a\u6307\u9488\u5b9a\u4e49\u6210\u4e00\u4e2a\u5185\u90e8\u7684\u6210\u5458\u53d8\u91cf"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"    Vector3r* p_rb_pos = nullptr; //\u521a\u4f53\u8d28\u5fc3\u4f4d\u7f6e\u7684\u6307\u9488\n")),(0,p.kt)("h2",{id:"3-\u4ecemingl\u4e2d\u83b7\u53d6\u952e\u76d8\u7684\u8f93\u5165\u5e76\u64cd\u4f5c\u521a\u4f53\u6307\u9488\u79fb\u52a8\u521a\u4f53"},"3 \u4eceMinGL\u4e2d\u83b7\u53d6\u952e\u76d8\u7684\u8f93\u5165\u5e76\u64cd\u4f5c\u521a\u4f53\u6307\u9488\u79fb\u52a8\u521a\u4f53"),(0,p.kt)("p",null,"\u5148\u8981\u627e\u5230\u952e\u76d8\u8f93\u5165\u7684\u4f4d\u7f6e\uff0c\u4f4d\u4e8e\nGUI\\OpenGL\\MiniGL.cpp  MiniGL::keyboard"),(0,p.kt)("p",null,"\u5728\u4e00\u957f\u4e32\u7684if-else\u4e2d\u95f4\u589e\u52a0\u8c03\u7528\u81ea\u5df1\u7684\u65b9\u6cd5\n",(0,p.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/48758868/198995646-7fbd2c17-b969-445a-95dd-ef78f806205f.png",alt:"image"})),(0,p.kt)("p",null,"\u8fd9\u91cc\u7684 get_key_input \u662f\u6211\u4eec\u81ea\u5df1\u5199\u7684\u65b9\u6cd5"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'    //\u83b7\u53d6\u952e\u76d8\u7684\u8f93\u5165\uff1a\u4eceGUI\\OpenGL\\MiniGL.cpp MiniGL::keyboard\n    void get_key_input(enum KEY input)\n    {\n        const float move_speed = 0.1;\n\n        if(input == KEY::down)\n        {\n            if(p_rb_pos != nullptr)\n            {\n                (*p_rb_pos)[1] -= move_speed;\n                printf("down!\\n");\n            }\n        }\n        else if(input == KEY::up)\n        {\n            if(p_rb_pos != nullptr)\n            {\n                (*p_rb_pos)[1] += move_speed;\n                printf("up!\\n");\n            }\n        }\n        ...\n')),(0,p.kt)("p",null,"\u5176\u4e2d\u679a\u4e3e\u7c7b\u662f"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"enum KEY{left=0, right, up, down, forward, backward};\n")),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/48758868/198995870-a09cf4d3-56b0-4188-8bfa-5ca3291ea051.png",alt:"image"})),(0,p.kt)("h2",{id:"\u6700\u7ec8\u7ed3\u679c"},"\u6700\u7ec8\u7ed3\u679c"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/48758868/198999690-93aee220-66c4-4143-bdee-1b90dc6c2105.gif",alt:"out"})),(0,p.kt)("h2",{id:"\u9644\u5f55interactiveh-\u5b8c\u6574\u4ee3\u7801"},"\u9644\u5f55\uff1aInteractive.h \u5b8c\u6574\u4ee3\u7801"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'#pragma once\n#include "SPlisHSPlasH/Common.h"\n\n//\u7528\u6237\u4ea4\u4e92\uff08\u952e\u76d8\u9f20\u6807\uff09\u7684\u4e2d\u4ecb\u7c7b\uff0c\u7528\u4e8e\u4f20\u9012\u548c\u5904\u7406\u6570\u636e\nstruct Interactive\n{\n    Vector3r mouse_pos; //\u9f20\u6807\u4f4d\u7f6e\n    enum KEY{left=0, right, up, down, forward, backward};\n    Vector3r* p_rb_pos = nullptr; //\u521a\u4f53\u8d28\u5fc3\u4f4d\u7f6e\u7684\u6307\u9488\n\n    //a singleton method to get the object\n    static Interactive& get_inter()\n    {\n        static Interactive inter;\n        return inter;\n    }\n    \n    //\u628amouse_pos\u4ece\u5916\u754c\u4f20\u9012\u7ed9Interactive\u5185\u90e8\n    void get_mouse_pos(const Vector3r& rhs)\n    {\n        mouse_pos[0] = rhs[0];\n        mouse_pos[1] = rhs[1];\n        mouse_pos[2] = rhs[2];\n        printf("mouse pos in Inter:(%.3f,\\t%.3f,\\t%.3f)\\n", mouse_pos[0],mouse_pos[1],mouse_pos[2]);\n    }\n\n    //\u83b7\u53d6\u952e\u76d8\u7684\u8f93\u5165\uff1a\u4eceGUI\\OpenGL\\MiniGL.cpp MiniGL::keyboard\n    void get_key_input(enum KEY input)\n    {\n        const float move_speed = 0.1;\n\n        if(input == KEY::down)\n        {\n            if(p_rb_pos != nullptr)\n            {\n                (*p_rb_pos)[1] -= move_speed;\n                printf("down!\\n");\n            }\n        }\n        else if(input == KEY::up)\n        {\n            if(p_rb_pos != nullptr)\n            {\n                (*p_rb_pos)[1] += move_speed;\n                printf("up!\\n");\n            }\n        }\n        else if(input == KEY::left)\n        {\n            if(p_rb_pos != nullptr)\n            {\n                (*p_rb_pos)[0] -= move_speed;\n                printf("left!\\n");\n            }\n        }\n        else if (input == KEY::right)\n        {\n            if (p_rb_pos != nullptr)\n            {\n                (*p_rb_pos)[0] += move_speed;\n                printf("right!\\n");\n            }\n        }\n        else if (input == KEY::forward)\n        {\n            if (p_rb_pos != nullptr)\n            {\n                (*p_rb_pos)[2] -= move_speed;\n                printf("forward!\\n");\n            }\n        }\n        else if (input == KEY::backward)\n        {\n            if (p_rb_pos != nullptr)\n            {\n                (*p_rb_pos)[2] += move_speed;\n                printf("backward!\\n");\n            }\n        }\n    }\n\n    //\u83b7\u53d6\u521a\u4f53\u7684\u63a7\u5236\u6743\u3002\n    void set_rb_pos(Vector3r& rb_pos)\n    {\n        // \u83b7\u53d6\u5e76\u8bbe\u5b9a\u4f4d\u7f6e\u4e3a\u9f20\u6807\u70b9\u51fb\u4f4d\u7f6e FIXME:\n        // (rb_pos) = mouse_pos; \n\n        //\u7528wasdfb\u6765\u79fb\u52a8\n        // \u83b7\u53d6\u521a\u4f53\u8d28\u5fc3\u6307\u9488\n        p_rb_pos = &rb_pos; \n        std::cout<< "rb_pos: "<< (rb_pos)<<"\\n";\n    }\n};\n')))}u.isMDXComponent=!0}}]);