"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4535],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),f=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=f(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=f(n),u=o,d=s["".concat(p,".").concat(u)]||s[u]||m[u]||i;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var f=2;f<i;f++)a[f]=n[f];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1816:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>f});var r=n(7462),o=(n(7294),n(3905));const i={},a="\u81ea\u52a8\u751f\u6210pdf\u6587\u732e\u76ee\u5f55\u7684python\u811a\u672c",l={unversionedId:"python/table-of-cotents",id:"python/table-of-cotents",title:"\u81ea\u52a8\u751f\u6210pdf\u6587\u732e\u76ee\u5f55\u7684python\u811a\u672c",description:"",source:"@site/docs/python/table-of-cotents.md",sourceDirName:"python",slug:"/python/table-of-cotents",permalink:"/python/table-of-cotents",draft:!1,editUrl:"https://github.com/chunleili/chunleili.github.io/tree/master/docs/python/table-of-cotents.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pip\u8bbe\u5b9a\u4ee3\u7406",permalink:"/python/proxy"},next:{title:"\u4f7f\u7528readthedoc\u5feb\u901f\u521b\u5efa\u5728\u7ebf\u6587\u6863",permalink:"/readthedoc/"}},p={},f=[],c={toc:f};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u81ea\u52a8\u751f\u6210pdf\u6587\u732e\u76ee\u5f55\u7684python\u811a\u672c"},"\u81ea\u52a8\u751f\u6210pdf\u6587\u732e\u76ee\u5f55\u7684python\u811a\u672c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os, re\n\nglobal countFile\ncountFile = 0\n\nglobal format \nformat = 0\n# format=0 #0 for typora, 1 for obsidian\uff0c 2 for all\n'''\n\u7531\u4e8eobsidian\u548ctypora\u652f\u6301\u7684\u94fe\u63a5\u683c\u5f0f\u4e0d\u540c\n\u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cfformat\n\u5f53format=0\u65f6\u5019\u4e3atypora\nformat=1\u7684\u65f6\u5019\u4e3aobsidian\n\u8fd9\u91cc\u9ed8\u8ba4\u662fobsidian\u683c\u5f0f\u7684\n'''\n\ndef get_filename(path, allfile, dict_filetype=None):\n    '''\u9012\u5f52\u83b7\u5f97\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u6587\u4ef6\u540d \n    @param : path \u8d77\u59cb\u76ee\u5f55\uff0c\u8981\u68c0\u67e5\u7684\u6839\u76ee\u5f55 \n    @param : allfile \u4f20\u5165\u7684\u521d\u59cb\u6587\u4ef6\u540d\u5217\u8868\uff0c\u586b\u7a7a\u5373\u53ef\n    @param : dict_filetype \u8981\u68c0\u67e5\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u4e3aNone\u65f6\u5219\u4e0d\u68c0\u67e5\u8fd4\u56de\u6240\u6709\u3002\u9ed8\u8ba4\u4e3aNone\n    @return: \u5217\u8868 \u6240\u6709\u4e0e dict_filetype \u5bf9\u5e94\u7684\u6587\u4ef6\u540d \n    '''\n    global countFile\n    global format\n    \n    filelist = os.listdir(path) \n    for filename in filelist:\n        \n        filepath = os.path.join(path, filename) \n        # \u5224\u65ad\u6587\u4ef6\u5939 \n        if os.path.isdir(filepath): \n            # \u6587\u4ef6\u5939\u7ee7\u7eed\u9012\u5f52 \n            with open(outFileName, \"a\",  encoding=\"utf-8\") as o:\n                    if (re.search('.obsidian', filepath)):\n                        pass\n                    else:\n                        o.write(\"\\n ## \"+ filepath[2:].replace('\\\\','/') + '\\n') \n\n            get_filename(filepath, allfile, dict_filetype)\n\n        else: \n            temp_file_type = filepath.split(\".\")[-1]\n            # \u5224\u65ad\u6587\u4ef6\u7c7b\u578b\n            if dict_filetype is None or temp_file_type in dict_filetype: \n                allfile.append(filepath) \n\n                countFile+=1\n\n                base = os.path.basename(filepath)\n                # print(filepath[2:])\n                # print(base)\n                with open(outFileName, \"a\",  encoding=\"utf-8\") as o:\n                    if format == 0:\n                        o.write('\u3010'+str(countFile)+'\u3011['+base+']')\n                        o.write('('+filepath.replace('\\\\','/')+')'+'\\n')\n                    elif format == 1:\n                        o.write('\u3010'+str(countFile)+'\u3011[['+base+']]\\n')\n    return allfile  \n\n\n\n\ndef generate(outFileName):\n    global countFile\n    # \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n    if (os.path.exists(outFileName)) :\n        #\u5b58\u5728\uff0c\u5219\u5220\u9664\u6587\u4ef6\n        os.remove(outFileName) \n\n    #\u6253\u5370\u65f6\u95f4\n    import datetime\n    time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n    get_filename('.', [], [\"pdf\"])\n\n    with open(outFileName, 'r+', encoding='utf-8') as o: \n        file_data = o.read() \n        o.seek(0, 0) \n        print(\"\u76ee\u5f55\u751f\u6210\u5b8c\u6210\uff0c\u751f\u6210\u65f6\u95f4\uff1a\"+time,\"\\n\u5171\u6709PDF\u6587\u732e\"+str(countFile)+\"\u4e2a\\n\"+file_data, file=o)\n\n    print(\"\u76ee\u5f55\u751f\u6210\u5b8c\u6210\uff0c\u751f\u6210\u65f6\u95f4\uff1a\"+time,\"\\n\u5171\u6709PDF\u6587\u732e\"+str(countFile)+\"\u4e2a\")\n    countFile=0\n\nif format==2 :\n    format=0\n    outFileName = \"\u81ea\u52a8\u751f\u6210\u6587\u732e\u76ee\u5f55-typora.md\"\n    generate(outFileName)\n\n    format=1\n    outFileName = \"\u81ea\u52a8\u751f\u6210\u6587\u732e\u76ee\u5f55-obsidian.md\"\n    generate(outFileName)\n\nif    format==0:\n    outFileName = \"\u81ea\u52a8\u751f\u6210\u6587\u732e\u76ee\u5f55-typora.md\"\n    generate(outFileName)\n\nif    format==1:\n    outFileName = \"\u81ea\u52a8\u751f\u6210\u6587\u732e\u76ee\u5f55-obsidian.md\"\n    generate(outFileName)\n")))}s.isMDXComponent=!0}}]);