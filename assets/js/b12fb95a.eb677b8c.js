"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7952],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>f});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),s=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=s(t.components);return r.createElement(u.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,u=t.parentName,l=c(t,["components","mdxType","originalType","parentName"]),p=s(n),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,i(i({ref:e},l),{},{components:n})):r.createElement(f,i({ref:e},l))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var u in e)hasOwnProperty.call(e,u)&&(c[u]=e[u]);c.originalType=t,c[p]="string"==typeof t?t:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4207:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},i="\u7ed3\u6784\u5316\u7ed1\u5b9a",c={unversionedId:"cpp/structured_bind",id:"cpp/structured_bind",title:"\u7ed3\u6784\u5316\u7ed1\u5b9a",description:"",source:"@site/docs/cpp/structured_bind.md",sourceDirName:"cpp",slug:"/cpp/structured_bind",permalink:"/cpp/structured_bind",draft:!1,editUrl:"https://github.com/chunleili/chunleili.github.io/tree/master/docs/cpp/structured_bind.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\u7684\u6700\u4f73\u65b9\u5f0f",permalink:"/cpp/return_multiple_vals"},next:{title:"variant and visit",permalink:"/cpp/variant and visit"}},u={},s=[],l={toc:s},p="wrapper";function d(t){let{components:e,...n}=t;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u7ed3\u6784\u5316\u7ed1\u5b9a"},"\u7ed3\u6784\u5316\u7ed1\u5b9a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#include<iostream>\n#include<map>\n#include<vector>\n#include<tuple>\nusing namespace std;\n\n//VS2022\n\nint main()\n{\n    //\u7ed1\u5b9a\u4e00\u4e2a\u6570\u7ec4\n    int arr[] = {1,2,3,4,5};\n    auto [a,b,c,d,e] = arr;\n    std::cout<<"bind a array:"<<std::endl;\n    std::cout<<"a="<<a<<", b="<<b<<", c="<<c<<", d="<<d<<", e="<<e<<std::endl;\n\n    //\u7ed1\u5b9a\u4e00\u4e2a\u7ed3\u6784\u4f53\n    struct S{\n        int a;\n        int b;\n        int c;\n    };\n    S s{1,2,3};\n    auto [x,y,z] = s;\n    std::cout<<"bind a structure:"<<std::endl;\n    std::cout<<"x="<<x<<", y="<<y<<", z="<<z<<std::endl;\n\n\n    //\u7ed1\u5b9a\u4e00\u4e2apair\n    std::pair<int,int> p{1,2};\n    auto [m,n] = p;\n    std::cout<<"bind a pair:"<<std::endl;\n    std::cout<<"m="<<m<<", n="<<n<<std::endl;\n\n\n    //\u7ed1\u5b9a\u4e00\u4e2atuple\n    std::tuple<int,int,int> t{1,2,3};\n    auto [i,j,k] = t;\n    std::cout<<"bind a tuple:"<<std::endl;\n    std::cout<<"i="<<i<<", j="<<j<<", k="<<k<<std::endl;\n\n    //\u7ed1\u5b9amap\n    std::map<int,int> mp{{1,2},{3,4}};\n    for(auto [key,value]:mp)\n    {\n        std::cout<<"key="<<key<<", value="<<value<<std::endl;\n    }\n\n    // \u7ed1\u5b9avector\u4e2d\u7684struct\n    struct employee\n    {\n        unsigned id;\n        std::string name;\n        std::string role;\n        unsigned salary;\n    };\n    std::vector<employee> employees{{1,"h","boss",1000},{2,"l","worker",500}};\n    for(const auto &[id,name,role,salary]:employees)\n    {\n        std::cout<<"id="<<id<<", name="<<name<<", role="<<role<<", salary="<<salary<<std::endl;\n    }\n\n    //\u6ce8\u610f\uff1a\u7ed1\u5b9a\u7684\u4e2a\u6570\u5fc5\u987b\u548c\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u4e2a\u6570\u4e00\u81f4\uff0c\u5426\u5219\u4f1a\u62a5\u9519\n\n    // std::tuple<int, float, long> tup(1, 2.0, 3);\n    // auto [a, b] = tup; // Does not work\n    // \u62a5\u9519\uff1a \u6807\u8bc6\u7b26\u7684\u6570\u76ee\u5fc5\u987b\u4e0e\u7c7b\u4f3c\u4e8e\u5143\u7956\u7c7b\u578b\u7684\u7ed3\u6784\u5316\u7ed1\u5b9a\u4e2d "std::tuple_size<std::tuple<int,float,long>>::value" \u7684\u503c\u76f8\u5339\u914d\n    \n    // int arr2[] = {1,2,3,4,5};\n    // auto [a, b] = arr2; // Does not work\n    // \u62a5\u9519\uff1a \u5143\u7d20\u6570\u91cf\u6bd4\u7ed1\u5b9a\u540d\u79f0\u6570\u91cf\u591a\n\n    return 0;\n}\n')))}d.isMDXComponent=!0}}]);