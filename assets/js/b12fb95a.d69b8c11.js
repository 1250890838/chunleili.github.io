"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3285],{5680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>y});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(t),m=a,y=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(y,i(i({ref:n},l),{},{components:t})):r.createElement(y,i({ref:n},l))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9075:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=t(8168),a=(t(6540),t(5680));const o={},i="\u7ed3\u6784\u5316\u7ed1\u5b9a",c={unversionedId:"cpp/structured_bind",id:"cpp/structured_bind",title:"\u7ed3\u6784\u5316\u7ed1\u5b9a",description:"",source:"@site/docs/cpp/structured_bind.md",sourceDirName:"cpp",slug:"/cpp/structured_bind",permalink:"/cpp/structured_bind",draft:!1,editUrl:"https://github.com/chunleili/chunleili.github.io/tree/master/docs/cpp/structured_bind.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\u7684\u6700\u4f73\u65b9\u5f0f",permalink:"/cpp/return_multiple_vals"},next:{title:"variant and visit",permalink:"/cpp/variant and visit"}},u={},s=[],l={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u7ed3\u6784\u5316\u7ed1\u5b9a"},"\u7ed3\u6784\u5316\u7ed1\u5b9a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'#include<iostream>\n#include<map>\n#include<vector>\n#include<tuple>\nusing namespace std;\n\n//VS2022\n\nint main()\n{\n    //\u7ed1\u5b9a\u4e00\u4e2a\u6570\u7ec4\n    int arr[] = {1,2,3,4,5};\n    auto [a,b,c,d,e] = arr;\n    std::cout<<"bind a array:"<<std::endl;\n    std::cout<<"a="<<a<<", b="<<b<<", c="<<c<<", d="<<d<<", e="<<e<<std::endl;\n\n    //\u7ed1\u5b9a\u4e00\u4e2a\u7ed3\u6784\u4f53\n    struct S{\n        int a;\n        int b;\n        int c;\n    };\n    S s{1,2,3};\n    auto [x,y,z] = s;\n    std::cout<<"bind a structure:"<<std::endl;\n    std::cout<<"x="<<x<<", y="<<y<<", z="<<z<<std::endl;\n\n\n    //\u7ed1\u5b9a\u4e00\u4e2apair\n    std::pair<int,int> p{1,2};\n    auto [m,n] = p;\n    std::cout<<"bind a pair:"<<std::endl;\n    std::cout<<"m="<<m<<", n="<<n<<std::endl;\n\n\n    //\u7ed1\u5b9a\u4e00\u4e2atuple\n    std::tuple<int,int,int> t{1,2,3};\n    auto [i,j,k] = t;\n    std::cout<<"bind a tuple:"<<std::endl;\n    std::cout<<"i="<<i<<", j="<<j<<", k="<<k<<std::endl;\n\n    //\u7ed1\u5b9amap\n    std::map<int,int> mp{{1,2},{3,4}};\n    for(auto [key,value]:mp)\n    {\n        std::cout<<"key="<<key<<", value="<<value<<std::endl;\n    }\n\n    // \u7ed1\u5b9avector\u4e2d\u7684struct\n    struct employee\n    {\n        unsigned id;\n        std::string name;\n        std::string role;\n        unsigned salary;\n    };\n    std::vector<employee> employees{{1,"h","boss",1000},{2,"l","worker",500}};\n    for(const auto &[id,name,role,salary]:employees)\n    {\n        std::cout<<"id="<<id<<", name="<<name<<", role="<<role<<", salary="<<salary<<std::endl;\n    }\n\n    //\u6ce8\u610f\uff1a\u7ed1\u5b9a\u7684\u4e2a\u6570\u5fc5\u987b\u548c\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u4e2a\u6570\u4e00\u81f4\uff0c\u5426\u5219\u4f1a\u62a5\u9519\n\n    // std::tuple<int, float, long> tup(1, 2.0, 3);\n    // auto [a, b] = tup; // Does not work\n    // \u62a5\u9519\uff1a \u6807\u8bc6\u7b26\u7684\u6570\u76ee\u5fc5\u987b\u4e0e\u7c7b\u4f3c\u4e8e\u5143\u7956\u7c7b\u578b\u7684\u7ed3\u6784\u5316\u7ed1\u5b9a\u4e2d "std::tuple_size<std::tuple<int,float,long>>::value" \u7684\u503c\u76f8\u5339\u914d\n    \n    // int arr2[] = {1,2,3,4,5};\n    // auto [a, b] = arr2; // Does not work\n    // \u62a5\u9519\uff1a \u5143\u7d20\u6570\u91cf\u6bd4\u7ed1\u5b9a\u540d\u79f0\u6570\u91cf\u591a\n\n    return 0;\n}\n')))}d.isMDXComponent=!0}}]);